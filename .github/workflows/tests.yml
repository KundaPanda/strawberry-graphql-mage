name: Tests

on:
  - push
  - pull_request

jobs:
  checks:
    name: ${{ matrix.session }} ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: '3.10', session: "pre-commit" }
          - { python-version: '3.10', session: "safety" }
          - { python-version: '3.10', session: "pyright" }
          - { python-version: '3.10', session: "markdownlint" }

    env:
      NOXSESSION: ${{ matrix.session }}

    steps:
      - name: Cache nox evironments
        uses: actions/cache@v3
        with:
          path: .nox
          key: ${{ runner.os }}-nox-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-nox-
      - name: Check out the repository
        uses: actions/checkout@v3.0.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version
      - name: Install Nox and nox-poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version
      - name: Install project
        run: |
          pip install .
      - name: Compute pre-commit cache key
        if: matrix.session == 'pre-commit'
        id: pre-commit-cache
        shell: python
        run: |
          import hashlib
          import sys
          python = "py{}.{}".format(*sys.version_info[:2])
          payload = sys.version.encode() + sys.executable.encode()
          digest = hashlib.sha256(payload).hexdigest()
          result = "${{ runner.os }}-{}-{}-pre-commit".format(python, digest[:8])
          print("::set-output name=result::{}".format(result))
      - name: Restore pre-commit cache
        uses: actions/cache@v3
        if: matrix.session == 'pre-commit'
        with:
          path: ~/.cache/pre-commit
          key: ${{ steps.pre-commit-cache.outputs.result }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ steps.pre-commit-cache.outputs.result }}-
      - name: Setup node.js
        uses: actions/setup-node@v3.5.0
        if: matrix.session == 'pyright' || matrix.session == 'markdownlint'
        with:
          node-version: '14'
      - name: Install pyright
        if: matrix.session == 'pyright'
        run: |
          npm install -g pyright
      - name: Install markdownlint
        if: matrix.session == 'markdownlint'
        run: |
          npm install -g markdownlint markdownlint-cli
      - name: Run Nox
        run: |
          nox --force-color --python=${{ matrix.python-version }}

  tests:
    name: ${{ matrix.session }} ${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { python-version: '3.10', os: ubuntu-latest, session: "tests" }
          - { python-version: 3.9, os: ubuntu-latest, session: "tests" }
          - { python-version: 3.8, os: ubuntu-latest, session: "tests" }
          - { python-version: '3.10', os: windows-latest, session: "tests" }
          - { python-version: '3.10', os: macos-latest, session: "tests" }

    env:
      NOXSESSION: ${{ matrix.session }}

    steps:
      - name: Cache nox evironments
        uses: actions/cache@v3
        with:
          path: .nox
          key: ${{ runner.os }}-nox-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-nox-
      - name: Check out the repository
        uses: actions/checkout@v3.0.2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.0.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version
      - name: Install Nox and nox-poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version
      - name: Install project
        run: |
          pip install .
      - name: Run Nox
        run: |
          nox --force-color --python=${{ matrix.python-version }}
      - name: Upload coverage data
        if: always() && startsWith(matrix.session, 'tests')
        uses: "actions/upload-artifact@v3.0.0"
        with:
          name: coverage-data
          path: ".coverage.*"

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3.0.2

      - name: Set up Python 3.10
        uses: actions/setup-python@v4.0.0
        with:
          python-version: '3.10'

      - name: Upgrade pip
        run: |
          pip install --constraint=.github/workflows/constraints.txt pip
          pip --version
      - name: Install Poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt poetry
          poetry --version
      - name: Install Nox and nox-poetry
        run: |
          pip install --constraint=.github/workflows/constraints.txt nox nox-poetry
          nox --version
      - name: Install project
        run: |
          pip install .
      - name: Download coverage data
        uses: actions/download-artifact@v3.0.0
        with:
          name: coverage-data

      - name: Combine coverage data and display human readable report
        run: |
          nox --force-color --session=coverage
      - name: Create coverage report
        run: |
          nox --force-color --session=coverage -- xml -i
      - name: Upload coverage report
        uses: codecov/codecov-action@v3.1.0
      - name: Run codacy-coverage-reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
